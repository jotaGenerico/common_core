🧰 Libft – Resumo Completo das Funções
✅ Nome da função
📌 O que ela faz
🧪 Quando/usos práticos
🚨 Cuidados importantes (caso existam)

🅰️ ft_atoi
📌 Converte uma string para um número inteiro (int).
🧪 Útil ao ler números passados como strings (ex: input do usuário).
🚨 Ignora espaços em branco no início, aceita sinal + ou -, para na 1ª parte não numérica.

🅲 ft_bzero
📌 Preenche uma área de memória com zero (\0).
🧪 Zera buffers ou inicializa memória antes do uso.
🚨 É equivalente a memset(ptr, 0, n).

🅲 ft_calloc
📌 Aloca memória inicializada com zeros.
🧪 Criação de vetores/arrays com memória já zerada.
🚨 Retorna NULL em caso de erro; resultado precisa ser convertido para o tipo desejado.

🅳 ft_isalnum
📌 Verifica se o caractere é alfanumérico (A-Z, a-z, 0-9).
🧪 Útil para validações.
🚨 Retorna 0 (falso) ou diferente de 0 (verdadeiro).

🅳 ft_isalpha
📌 Verifica se é uma letra (A-Z ou a-z).
🧪 Validação de letras.

🅳 ft_isascii
📌 Verifica se o caractere está dentro da tabela ASCII (0–127).
🧪 Evita erros em caracteres fora do padrão ASCII.

🅳 ft_isdigit
📌 Verifica se é um número de 0 a 9.
🧪 Muito usado em validações de entrada.

🅳 ft_isprint
📌 Verifica se é um caractere imprimível (incluindo espaço).
🧪 Validação para exibição segura.

🅳 ft_itoa
📌 Converte um int para char *.
🧪 Para imprimir inteiros em forma de texto.
🚨 Aloca memória dinamicamente, precisa de free.

🅼 ft_memchr
📌 Procura um byte em uma área de memória.
🧪 Útil ao trabalhar com buffers binários.

🅼 ft_memcmp
📌 Compara duas áreas de memória byte a byte.
🧪 Comparação de buffers.
🚨 Pode retornar negativo, zero ou positivo.

🅼 ft_memcpy
📌 Copia n bytes da origem para o destino.
🧪 Para copiar memória não sobreposta.
🚨 Não funciona corretamente com sobreposição de memória!

🅼 ft_memmove
📌 Copia n bytes, mesmo com sobreposição.
🧪 Alternativa segura ao memcpy.
🚨 Mais lento que memcpy, mas seguro.

🅼 ft_memset
📌 Preenche n bytes com um valor.
🧪 Zerar ou inicializar memória com outro valor.

🅿️ ft_putchar_fd
📌 Escreve um caractere no file descriptor indicado.
🧪 Usado para imprimir com fd = 1 ou redirecionar para arquivos.

🅿️ ft_putendl_fd
📌 Escreve uma string seguida de uma quebra de linha.
🧪 Para exibir mensagens com \n ao final.

🅿️ ft_putnbr_fd
📌 Escreve um número inteiro em qualquer file descriptor.
🧪 Para printar inteiros em arquivos ou stdout.

🅿️ ft_putstr_fd
📌 Escreve uma string em um file descriptor.
🧪 Idem ao ft_putchar_fd, mas para strings.

🆂 ft_split
📌 Divide uma string em substrings, separando pelo caractere c.
🧪 Para separar palavras, argumentos etc.
🚨 Aloca vários ponteiros, precisa free em todos.
🚨 Pode usar charset se quiser permitir múltiplos separadores.

🆂 ft_strchr
📌 Procura a primeira ocorrência de um caractere em uma string.
🧪 Como strchr da lib C padrão.

🆂 ft_strdup
📌 Duplica uma string, alocando memória.
🧪 Alternativa segura para copiar strings.
🚨 Requer free.

🆂 ft_striteri
📌 Aplica uma função a cada caractere de uma string (com índice).
🧪 Para modificações in-place com base na posição.
🚨 Altera a string original.

🆂 ft_strjoin
📌 Junta duas strings em uma nova.
🧪 Para combinar partes de caminhos, textos, etc.
🚨 Retorna nova string, precisa de free.

🆂 ft_strlcat
📌 Concatena duas strings, garantindo limite de tamanho.
🧪 Para evitar overflow de buffer.
🚨 Sempre calcula o tamanho final que tentaria escrever, não necessariamente o escrito.

🆂 ft_strlcpy
📌 Copia string com limite de tamanho e retorno do comprimento total.
🧪 Para buffers com espaço limitado.

🆂 ft_strlen
📌 Retorna o tamanho de uma string (sem o \0).
🧪 Base de várias funções com strings.

🆂 ft_strmapi
📌 Cria nova string com transformação de cada caractere, com índice.
🧪 Como map() de outras linguagens.
🚨 Gera nova string, requer free.

🆂 ft_strncmp
📌 Compara até n caracteres entre duas strings.
🧪 Para comparação segura de prefixos.
🚨 Se uma string acabar antes de n, pode ainda haver diferença!

🆂 ft_strnstr
📌 Procura substring needle dentro de haystack, até len bytes.
🧪 Para busca parcial de strings.

🆂 ft_strrchr
📌 Procura a última ocorrência de um caractere.
🧪 Para identificar extensão de arquivos, ou último separador.

🆂 ft_strtrim
📌 Remove caracteres de set do início e fim da string.
🧪 Para limpar inputs ou normalizar dados.
🚨 Retorna nova string, requer free.

🆂 ft_substr
📌 Retorna uma substring a partir de uma posição e com comprimento máximo.
🧪 Para extrair partes específicas.
🚨 Protege contra overread, retorna string vazia se start >= len.

🆃 ft_tolower
📌 Converte letra maiúscula para minúscula.
🧪 Para normalização de texto.

🆃 ft_toupper
📌 Converte letra minúscula para maiúscula.
🧪 Idem ao tolower, mas ao contrário.

